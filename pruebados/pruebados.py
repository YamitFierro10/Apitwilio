import os
import reflex as rx
import openai 
from fastapi import Request
from twilio.rest import Client
from dotenv import load_dotenv
from pruebados.api import handle


class QA(rx.Base):
    """A question and answer pair."""

    question: str
    answer: str

DEFAULT_CHATS = {
    "Intros": [],
}

chats: dict[str, list[QA]] = DEFAULT_CHATS

# Cargar las variables de entorno desde el archivo .env
load_dotenv()


# Configura las claves de API
openai.api_key = os.getenv("OPENAI_API_KEY")
twilio_sid = os.getenv("TWILIO_ACCOUNT_SID")
twilio_token = os.getenv("TWILIO_AUTH_TOKEN")

system_rol='''  DocuBot es un asistente virtual dise√±ado para ayudar a los usuarios a llenar documentos legales y administrativos de manera r√°pida y sencilla. Puede guiar paso a paso en la elaboraci√≥n de demandas simples, contratos de arrendamiento, tr√°mites de veh√≠culos y otros documentos.

               Tareas y Funcionalidades:
               Recepci√≥n de solicitudes

               Identifica el tipo de documento que el usuario necesita.
               Pregunta si se requiere un formato en blanco o si se debe llenar con datos espec√≠ficos.
               Gu√≠a paso a paso en el llenado

               Solicita los datos necesarios de manera estructurada (ejemplo: nombres, fechas, montos, direcciones).
               Da ejemplos y explicaciones si es necesario.
               Permite correcciones antes de finalizar el documento.
               Generaci√≥n del documento

               Completa la plantilla con la informaci√≥n brindada.
               Env√≠a el documento en formato Word o PDF.
               Revisi√≥n y recomendaciones

               Sugiere revisar los datos antes de descargar el documento.
               Puede proporcionar consejos b√°sicos sobre el uso del documento, sin reemplazar asesor√≠a legal.
               Opcional: Enlace con servicios adicionales

               Puede sugerir contactar a un abogado si el usuario necesita asesoramiento legal.
               Puede integrar opciones de firma digital o notar√≠a (si es posible).
               Ejemplo de Conversaci√≥n
              üîπ Usuario: Hola, necesito hacer un contrato de arrendamiento.

               ü§ñ DocuBot: ¬°Hola! üòä Te ayudar√© a llenar tu contrato de arrendamiento. ¬øEs para una vivienda o un local comercial?

               üîπ Usuario: Para una vivienda.

               ü§ñ DocuBot: Perfecto. Necesito algunos datos:
                1Ô∏è‚É£ Nombre del arrendador:
                2Ô∏è‚É£ Nombre del arrendatario:
                3Ô∏è‚É£ Direcci√≥n del inmueble:
                4Ô∏è‚É£ Monto del arriendo:
                5Ô∏è‚É£ Duraci√≥n del contrato (meses/a√±os):

               (El asistente recopila los datos y genera el documento)

               ü§ñ DocuBot: ¬°Listo! Aqu√≠ tienes tu contrato de arrendamiento en formato PDF. üìÑ‚úÖ ¬øNecesitas hacer alg√∫n cambio antes de descargarlo?'''


mensaje=[{"role": "system", "content": system_rol}]


def get_ai_response(user_message):
    # Inserta el mensaje del usuario en el historial de mensajes
    mensaje.append({"role": "user", "content": user_message})
    
    completar = openai.ChatCompletion.create(
        model="gpt-4",
        messages=mensaje
    )
    answer2 = completar['choices'][0]['message']['content'].strip()
    
    # A√±ade la respuesta al historial de mensajes
    mensaje.append({"role": "assistant", "content": answer2})
    return answer2

async def handle_incoming_message(request: Request):
    form = await request.form()  # Extrae el formulario de la solicitud
    incoming_msg = form.get("Body")  # Extrae el mensaje
    from_number = form.get("From")  # Extrae el n√∫mero de remitente

    # Generar la respuesta AI usando OpenAI
    ai_reply = get_ai_response(incoming_msg)
    client = Client(twilio_sid, twilio_token)
        
    # Enviar la respuesta de vuelta al usuario por WhatsApp
    client.messages.create(
        from_="whatsapp:+14155238886",  # N√∫mero de Twilio
        body=ai_reply,
        to=from_number  # Tu n√∫mero de WhatsApp 
    )
    print(f"Mensaje enviado a {from_number}: {ai_reply}")
        
    # Retornar una respuesta JSON
    return {"status": "success", "response": ai_reply}

#Reflex app
app = rx.App()
app.api.add_api_route("/handle",handle) 
app.api.add_api_route("/whatsapp", handle_incoming_message, methods=["POST"])



